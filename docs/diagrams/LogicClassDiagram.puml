@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class MarkParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class "{abstract}\nCommand" as Command

package Result {
Class CommandResult
Class JKLCommandResult
}
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

package Storage{
Class HiddenStorage #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" MarkParser
MarkParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser .left.|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .right.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil ..> Prefix
ArgumentTokenizer ..> Prefix
XYZCommand -up-|> Command
LogicManager .left.> Command : executes >

LogicManager -up-> Model
LogicManager -> Storage
Command .right.> Model
Command ..> Storage
note bottom of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc

Logic ..> CommandResult
JKLCommandResult --|> CommandResult
LogicManager ..> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
note bottom of JKLCommandResult: JKLCommandResult = HelpCommandResult, \nExitCommandResult, TabCommandResult, etc
@enduml

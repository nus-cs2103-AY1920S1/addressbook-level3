{
  "modulesInfo": [
    {
      "code": "CS1101S",
      "name": "Programming Methodology",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the concepts of programming and computational problem solving, and is the first and foremost introductory module to computing. Starting from a small core of fundamental abstractions, the module introduces programming as a method for communicating computational processes. The module begins with purely functional programming based on a simple substitution-based execution model, and ends with a powerful modern imperative language based on a realistic environment-based execution model. Topics covered include: functional abstraction, recursion, higher-order functions, data abstraction, algorithmic strategies, state mutation, loops and arrays, evaluation strategies, sorting and searching, debugging and testing.",
      "prereqTreeString": ""
    },
    {
      "code": "CS1231S",
      "name": "Discrete Structures",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalization proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.",
      "prereqTreeString": ""
    },
    {
      "code": "CS2030",
      "name": "Programming Methodology II",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include\nobjects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
      "prereqTreeString": "CS1101S"
    },
    {
      "code": "CS2040S",
      "name": "Data Structures and Algorithms",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module introduces students to the design and\nimplementation of fundamental data structures and\nalgorithms. The module covers basic data structures\n(linked lists, stacks, queues, hash tables, binary heaps,\ntrees, and graphs), searching and sorting algorithms, and\nbasic analysis of algorithms.",
      "prereqTreeString": "(AND CS1231S CS1101S)"
    },
    {
      "code": "CS2100",
      "name": "Computer Organisation",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.",
      "prereqTreeString": "CS1101S"
    },
    {
      "code": "CS2103T",
      "name": "Software Engineering",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
        "SE"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.",
      "prereqTreeString": "(AND CS2030 CS2040S)"
    },
    {
      "code": "CS2105",
      "name": "Introduction to Computer Networks",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
        "NDS"
      ],
      "focusElectives": [
      ],
      "description": "This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.",
      "prereqTreeString": "CS2040S"
    },
    {
      "code": "CS2106",
      "name": "Introduction to Operating Systems",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.",
      "prereqTreeString": "CS2100"
    },
    {
      "code": "CS3230",
      "name": "Design and Analysis of Algorithms",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
        "Algo"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students' ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.",
      "prereqTreeString": "(AND CS2040S CS1231S)"
    },
    {
      "code": "IS1103X",
      "name": "IS Innovations in Organisation",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "The module gives a wide yet insightful understanding of the impact of IT on organisation and society. Issues such as Internet and “new economy” geographies; impacts of IT and creation of IT innovation for public\nhealth, urban planning, and regional equity, food systems, climate change can be discussed. Other issues for consideration could be dark web and IT security advancement, open vs. closed innovation creation. Misuse of IT that put ethics and professionalism into question will be also discussed.",
      "prereqTreeString": ""
    },
    {
      "code": "CS2101",
      "name": "Effective Communication for Computing Professionals",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.",
      "prereqTreeString": ""
    },
    {
      "code": "ES2660",
      "name": "Communicating in the Information Age",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "In a context of prolific production and convenient access to content and innovation in the Information Age, how should one critically process and clearly communicate ideas to various audiences? In this module, students will learn to question and articulate their analysis of assumptions and assertions on issues facing the Information Age through processes such as identifying bias and substantiating arguments. The Ennis’ (1986, 2001) taxonomy of critical thinking dispositions will be employed to develop students’ analytical thinking skills and their ability to articulate cogent responses to arguments or to defend their own positions in both written and oral form.",
      "prereqTreeString": ""
    },
    {
      "code": "MA1521",
      "name": "Calculus for Computing",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module provides a basic foundation for calculus and its related subjects required by computing students. The objective is to train the students to be able to handle calculus techniques arising in their courses of specialization. In addition to the standard calculus material, the course also covers simple mathematical modeling techniques and numerical methods in connection with ordinary differential equations. \n\n\n\nMajor topics: \n\nPreliminaries on sets and number systems. \n\nCalculus of functions of one variable and applications. \n\nSequences, series and power series.   \n\nFunctions of several variables. Extrema.\n\nFirst and second order differential equations. \n\nBasic numerical methods for ordinary differential equations.",
      "prereqTreeString": ""
    },
    {
      "code": "MA1101R",
      "name": "Linear Algebra I",
      "mc": 4,
      "su": true,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module is a first course in linear algebra.  Fundamental concepts of linear algebra will be introduced and investigated in the context of the Euclidean spaces R^n.  Proofs of results will be presented in the concrete setting.  Students are expected to acquire computational facilities and geometric intuition with regard to vectors and matrices.  Some applications will be presented. Major topics: Systems of linear equations, matrices, determinants, Euclidean spaces, linear combinations and linear span, subspaces, linear independence, bases and dimension, rank of a matrix, inner products, eigenvalues and eigenvectors, diagonalization, linear transformations between Euclidean spaces, applications.",
      "prereqTreeString": ""
    },
    {
      "code": "ST2334",
      "name": "Probability and Statistics",
      "mc": 4,
      "su": false,
      "isCore": true,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "Basic concepts of probability, conditional probability, independence, random variables, joint and marginal distributions, mean and variance, some common probability distributions, sampling distributions, estimation and hypothesis testing based on a normal population.  This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites. Preclude ME students taking or have taken ME4273.",
      "prereqTreeString": "MA1521"
    },
    {
      "code": "CS3236",
      "name": "Introduction to Information Theory",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Algo"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the basics of modern information theory. It covers how information can be quantified, and what this quantification tells us about how well we can compress and transmit information without error. It discusses basic error correcting techniques, and information-theoretic cryptography. Topics covered\ninclude: mathematical techniques, entropy measures, fundamental limits to data compression and noisy-channel coding, examples of error-correcting codes, examples of information theoretic cryptography (commitments, secure computation, key distribution, randomness extraction).",
      "prereqTreeString": "(AND CS1231S ST2334)"
    },
    {
      "code": "CS4231",
      "name": "Parallel and Distributed Algorithms",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Algo",
        "Para",
        "NDS"
      ],
      "focusElectives": [
      ],
      "description": "This course will examine some fundamental issues in parallel programming and distributed computing, and the relationships between the two.  Parallel programming: mutual exclusion, semaphores, consistency, wait-free synchronization.  Distributed computing: time, global state, snapshots, message ordering.  Relationships: consensus, fault-tolerance, transactions, self-stabilization.",
      "prereqTreeString": "(OR CS3230 CS3210)"
    },
    {
      "code": "CS4232",
      "name": "Theory of Computation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Algo"
      ],
      "focusElectives": [
      ],
      "description": "The objective of this module is to provide students with a theoretical understanding of what can be computed, and an introduction to the theory of complexity. It aims to introduce (1) some standard formal models of computation so as to develop an understanding of what can or cannot be computed by various computing devices; (2) some reasoning techniques commonly used in computer science; these include model equivalence, non-determinism, digitalisation, simulation and reduction; and (3) the mathematical formulation of objects in computer science so as to study their properties.",
      "prereqTreeString": "(OR CS1231S CS1231S)"
    },
    {
      "code": "CS4234",
      "name": "Optimisation Algorithms",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Algo"
      ],
      "focusElectives": [
      ],
      "description": "This module covers common algorithmic techniques for solving optimisation problems, and introduces students to approaches for finding good-enough solutions to NP-hard problems. Topics covered include linear and integer programming, network flow algorithms, local search heuristics, approximation algorithms, and randomized algorithms. Through analysis and application of the techniques to a variety of canonical problems, students develop confidence to (i) appropriately model a given optimisation problem, (ii) apply appropriate algorithmic techniques to solve the problem, (iii) analyse the properties of the problem and candidate algorithms, such as time and space complexity, convergence, approximability, and optimality bound.",
      "prereqTreeString": "(AND CS3230 MA1101R)"
    },
    {
      "code": "CS3233",
      "name": "Competitive Programming",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.",
      "prereqTreeString": ""
    },
    {
      "code": "CS4257",
      "name": "Algorithmic Foundations of Privacy",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo",
        "ComSec"
      ],
      "description": "This module covers algorithmic foundations of computation\nand communication privacy. It provides a thorough\nmethodology for analysis of privacy against inference\nattacks using techniques from statistics, probability theory,\nand machine learning. Students will learn how to reason\nquantitatively about privacy, and evaluate it using the\nappropriate metrics. The module will help students to\ndesign privacy-preserving mechanisms for a range of\nsystems from anonymous communication to data analytics.\nAfter this module, students should be able to identify\nprivacy vulnerabilities in a system, design inference\nattacks, and propose effective countermeasures in a\nsystematic manner.",
      "prereqTreeString": "(AND CS2107 CS3230 ST2334)"
    },
    {
      "code": "CS4268",
      "name": "Quantum Computing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "This module will introduce basics of quantum computing and cover various well known algorithms e.g. Deutsch-Jozsa algorithm, Simon’s algorithms, quantum Fourier transform, phase estimation, order finding, Shor’s algorithm and Grover’s algorithm. The module will also cover some basics in quantum information theory, cryptography and error correction.",
      "prereqTreeString": "(AND CS3230 MA1101R ST2334)"
    },
    {
      "code": "CS5230",
      "name": "Computational Complexity",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "The aim of this module is to study the various measures of difficulty of problem solving in computing, and to introduce some techniques in theoretical computer science such as non-determinism, digitalisation, simulation, padding, reduction, randomisation and interaction. Topics covered include: space and time complexity - the classes P, NP, co-NP, PSPACE, EXP, etc.; tape compression; linear speedup; polynomial reduction; Cook's theorem; Savitch's theorem; translation lemma; Gap theorem; NP-completeness and NP-hard problems; probabilistic complexity classes; approximation algorithms; and interactive protocols.",
      "prereqTreeString": "CS4232"
    },
    {
      "code": "CS5234",
      "name": "Algorithms at Scale",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "This course presents advanced techniques for the design and analysis of algorithms and data structures, with emphasis on efficiency and scalability. It will cover a variety of algorithmic topics that arise when coping with very large data sets. How do you design algorithms that scale well? How do you process streaming data? How do you construct algorithms that run efficiently on modern hardware? The goal of this module is to cover modern tools and techniques in algorithm design.",
      "prereqTreeString": "CS3230"
    },
    {
      "code": "CS5236",
      "name": "Advanced Automata Theory",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "In computer science, automata are an important tool for many theoretical investigations. Various types of automata have been used to characterise complexity classes. This module covers automata theory in depth, describes the\nChomsky hierarchy, and introduces various advanced topics including automata structures, automata on infinite words, automata on trees and the learnability of classes of regular languages from queries and positive data.",
      "prereqTreeString": "CS4232"
    },
    {
      "code": "CS5237",
      "name": "Computational Geometry and Applications",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo",
        "CGG"
      ],
      "description": "The course aims to provide students with a geometric viewpoint in problem solving. It lays a foundation for solving problems with computational geometric methods, and bridges the gap between theoretical computer science and the real applications by introducing application areas, such as bio-geometric modelling, computer graphics and mesh generation, as well as other engineering problems such as reverse engineering. Topics include: convex-hull algorithms, simplicial complexes, union of balls, Voronoi diagram, Delaunay triangulation, lifting and projecting, alpha shape, surface reconstruction, sphere algebra, orthogonality and complementarity, molecular skin surfaces, curvatures and surface meshing, deformation and morphing, etc.",
      "prereqTreeString": "CS3230"
    },
    {
      "code": "CS5238",
      "name": "Advanced Combinatorial Methods in Bioinformatics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "Biology data are too enormous. Handling them using brute-force approaches becomes impossible and efficient algorithms are required. This module has an in-depth study of some of these advanced algorithms. Through the course, students not only are able to understand these algorithms in detail, but are also given chances to solve some research problems in this field. Topics include sequence comparison, structure comparison and prediction, phylogenetic tree reconstruction and comparison, sequencing by hybridisation, Genome rearrangements, gene network, micro-array.",
      "prereqTreeString": "CS3230"
    },
    {
      "code": "CS5330",
      "name": "Randomized Algorithms",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Algo"
      ],
      "description": "The module will cover basic concepts in the design and analysis of randomized algorithms. It will cover both basic techniques, such as Chernoff bounds, random walks, and the probabilistic method, and a variety of practical algorithmic applications, such as load balancing, hash functions, and graph/network algorithms. The focus will be on utilizing randomization to develop algorithms that are more efficient and/or simpler than their deterministic counterparts.",
      "prereqTreeString": "CS3230"
    },
    {
      "code": "CS3243",
      "name": "Introduction to Artificial Intelligence",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "AI"
      ],
      "focusElectives": [
      ],
      "description": "The module introduces the basic concepts in search and knowledge representation as well as to a number of sub-areas of artificial intelligence. It focuses on covering the essential concepts in AI. The module covers Turing test, blind search, iterative deepening, production systems, heuristic search, A* algorithm, minimax and alpha-beta procedures, predicate and first-order logic, resolution refutation, non-monotonic reasoning, assumption-based truth maintenance systems, inheritance hierarchies, the frame problem, certainly factors, Bayes' rule, frames and semantic nets, planning, learning, natural language, vision, and expert systems and LISP.",
      "prereqTreeString": "(AND CS2040S CS1231S)"
    },
    {
      "code": "CS3244",
      "name": "Machine Learning",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "AI"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces basic concepts and algorithms in machine learning and neural networks. The main reason for studying computational learning is to make better use of powerful computers to learn knowledge (or regularities) from the raw data. The ultimate objective is to build self-learning systems to relieve human from some of already-too-many programming tasks. At the end of the course, students are expected to be familiar with the theories and paradigms of computational learning, and capable of implementing basic learning systems.",
      "prereqTreeString": "(AND CS2040S MA1101R MA1521 ST2334)"
    },
    {
      "code": "CS4243",
      "name": "Computer Vision and Pattern Recognition",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "AI"
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "This module is for undergraduates who are interested in computer vision and its applications.  It covers (a) the basic skills needed in handling images and videos, (b) the basic theories needed to understand geometrical computer vision, and (c) pattern recognition.  Topics covered in image handling include: contrast stretch, histogram equalization, noise removal, and color space.  Topics covered in geometrical vision include:  affine transform, vanishing points, camera projection models, homography, camera calibration, rotation representations including quaternions, epipolar geometry, binocular stereo, structure from motion.  Topics covered for pattern recognition include principal component analysis.",
      "prereqTreeString": "(AND (AND CS2030 CS2040S) MA1101R MA1521 ST2334)"
    },
    {
      "code": "CS4244",
      "name": "Knowledge Representation and Reasoning",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "AI"
      ],
      "focusElectives": [
      ],
      "description": "This course will focus on core issues of representation and reasoning of the knowledge in the context of design of intelligent machines. We will focus on how logic can be used to formalise and perform deduction from existing knowledge. We will then discuss compilation techniques. Finally, we will discuss limitations of monotonic logic and discuss challenges for non-monotonic reasoning.",
      "prereqTreeString": "CS3243"
    },
    {
      "code": "CS4246",
      "name": "AI Planning and Decision Making",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "AI"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action\nconsequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and non-deterministic planning,\npractical planning and acting under resource constraints and uncertainy, expected utility and rational decision making, decision networks, Markov decision processes,\nelementary game theory, and multi-agent planning and decision making.",
      "prereqTreeString": "(AND CS3243 ST2334)"
    },
    {
      "code": "CS4248",
      "name": "Natural Language Processing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "AI",
        "MIR"
      ],
      "focusElectives": [
      ],
      "description": "This module deals with computer processing of human languages, emphasizing a corpus-based empirical approach. The topics covered include: 1. Linguistic essentials. 2. Basic techniques and algorithms: Hidden Markov model, Viterbi algorithm, supervised learning algorithms. 3. Words: part-of-speech tagging. 4. Syntax: noun phrase chunking, named entity tagging, parsing (top down, bottom up, probabilistic). 5. Semantics: word sense disambiguation. 6. Pragmatics: discourse, co-reference resolution. 7. Applications: text categorisation, text summarisation, language identification, information extraction, question answering, machine translation.",
      "prereqTreeString": "(AND (OR CS3243 CS3245) ST2334)"
    },
    {
      "code": "CS4216",
      "name": "Constraint Logic Programming",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI",
        "PL"
      ],
      "description": "This course introduces the programming methodology of Constraint Logic Programming (CLP). It first covers programming in PROLOG, the basic\n\nCLP programming language. The main part of the course covers modelling of complex problems using constraints and rules, and the use of advanced\n\nalgorithms that are supported by the constraint solvers in modern CLP systems. Also covered are the mathematical foundations of CLP. Throughout\n\nthe course, practical exercises are performed using a modern CLP system such as CLP(R) or Eclipse.",
      "prereqTreeString": "CS2104"
    },
    {
      "code": "CS4220",
      "name": "Knowledge Discovery Methods in Bioinformatics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI",
        "DB"
      ],
      "description": "The advent of high throughput technologies (e.g., DNA chips, microarray), biologists are being overloaded with information (e.g., gene expression data). A systematic way is needed to analyze the data to make sense of them. This module is introduced to provide students with knowledge of techniques that can be used to analyse biological data to enable them to discover new knowledge. At the end of the module, students will be able to identify the relevant techniques for different biological data to uncover new information. Topics include: Clustering analysis, classification, association rule mining; support vector machines; Hidden Markov Models.",
      "prereqTreeString": "CS2220"
    },
    {
      "code": "CS4277",
      "name": "3D Computer Vision",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI"
      ],
      "description": "One of the most important capability for robots such as self-driving cars, domestic mobile robots, and drones to achieve full autonomy is the ability to perceive the 3D environment. A camera is an excellent choice as the main sensory device for robotic perception because it produces information-rich images, and is lightweight, low cost and requires little or no maintenance. This module covers the mathematical concepts and algorithms that allow us to recover the 3D geometry of the camera motions and the structures in its environment. Topics include projective geometry, camera model, one-/two-/three-/N-View reconstructions and stereo, generalized cameras and non- rigid structure-from-motion.",
      "prereqTreeString": "(AND MA1101R CS2040S)"
    },
    {
      "code": "CS5209",
      "name": "Foundation in Logic and AI",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI"
      ],
      "description": "Many functionalities which were previously handled by electrical or mechanical devices are now computer controlled. In order to develop reliable computer systems, we need to have the foundations for logically reasoning about their behaviour. This module introduces the students to mathematical logic and its usage in modelling/validating computer systems.",
      "prereqTreeString": "CS3234"
    },
    {
      "code": "CS5228",
      "name": "Knowledge Discovery and Data Mining",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI",
        "DB"
      ],
      "description": "This course introduces fundamental principles behind data mining and efficient techniques for mining large databases. It provides an overview of the algorithmic aspect of data mining: its efficiency (high-dimensional database indexing, OLAP, data reduction, compression techniques) and effectiveness (machine learning involving greedy search, branch and bound, stochastic search, parameter optimisation). Efficient techniques covered include association rules mining (Apriori algorithm, correlation search, constrained association rule discovery), classifier induction (decision trees, RainForest, SLIQ; Support vector machine; Naive Bayesian; classification based on association / visualisation), cluster analysis (k-means, k-mediods, DBSCAN, OPTICS, DENCLUE, STING, CLUSEQ, ROCK etc), and outliers/deviants detection (LOF, Distance-based outlier etc).",
      "prereqTreeString": "(AND CS2102 CS3243 ST2334)"
    },
    {
      "code": "CS5242",
      "name": "Neural Networks and Deep Learning",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI"
      ],
      "description": "This module provides students with the knowledge of deep neural network and enables them to apply deep learning methods effectively on real world problems.  The module emphasizes on the understanding of the principles of neural networks and deep learning; practical guidelines and techniques for deep learning; and their applications.  Through assignments and projects, students will design, develop, and evaluate deep learning-based solutions to practical problems, such as those in the areas of computer vision, bioinformatics, fintech, cybersecurity, and games.",
      "prereqTreeString": "CS3244"
    },
    {
      "code": "CS5340",
      "name": "Uncertainty Modelling in AI",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI"
      ],
      "description": "The module covers modelling methods that are suitable for reasoning with uncertainty. The main focus will be on probabilistic models including Bayesian networks and Markov networks. Topics include representing conditional independence, building graphical models, inference using graphical models and learning from data. Selected applications in various domains such as speech, vision, natural language processing, medical informatics, bioinformatics, data mining and others will be discussed.",
      "prereqTreeString": "(AND CS3243 ST2334)"
    },
    {
      "code": "CS5339",
      "name": "Theory and Algorithms for Machine Learning",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "AI"
      ],
      "description": "The module aims to provide a broad theoretical understanding of machine learning and how the theory guides the development of algorithms and applications. Topics covered include the approximation capabilities of common function classes used for machine learning, such as decision trees, neural networks, and support vector machines, the sample complexity of learning different function classes and methods of reducing the estimation error such as regularization and model selection, and computational methods used for learning such as convex optimization, greedy methods, and stochastic gradient\ndescent.",
      "prereqTreeString": "CS3244"
    },
    {
      "code": "CS3241",
      "name": "Computer Graphics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "CGG"
      ],
      "focusElectives": [
      ],
      "description": "This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.",
      "prereqTreeString": "(AND CS2030 CS2040S)"
    },
    {
      "code": "CS3242",
      "name": "3D Modeling and Animation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "CGG"
      ],
      "focusElectives": [
      ],
      "description": "This module aims to provide fundamental concepts in 3D modeling and animation. It also serves as a bridge to advanced media modules. After taking this module, students should be able to use these concepts to easily build or work with digital models, manipulate the models by means of computer deformation and animation, and use lighting and rendering techniques to create appealing scenes. Topics include coordinate spaces, transforms, 3D model representations, hierarchical structures, deformation, procedural modelling, particle systems, character animation, shading networks, lighting, and scripting concepts.",
      "prereqTreeString": "(AND CS3241 MA1101R MA1521)"
    },
    {
      "code": "CS3247",
      "name": "Game Development",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "CGG"
      ],
      "focusElectives": [
      ],
      "description": "The objective of this module is to introduce techniques for electronic game design and programming. This module covers a range of important topics including 3D maths, game physics, game AI, sound, as well as user interface for computer games. Furthermore, it will give an overview of computer game design to the students. Through laboratory programming exercises, the students will have hands-on programming experience with popular game engines and will develop basic games using those engines.",
      "prereqTreeString": "CS3241"
    },
    {
      "code": "CS4247",
      "name": "Graphics Rendering Techniques",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "CGG"
      ],
      "focusElectives": [
      ],
      "description": "This module provides a general treatment of real-time and offline rendering techniques in 3D computer graphics. Specific topics include the raster graphics pipeline, viewing and transformation, real-time mapping techniques, real-time shadow algorithms, local reflection models, global illumination, distributed ray tracing, photon mapping, radiosity, volume rendering, image-based rendering and modelling, and strategies for anti-aliasing and photo-realism.",
      "prereqTreeString": "CS3241"
    },
    {
      "code": "CS4350",
      "name": "Game Development Project",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "CGG"
      ],
      "focusElectives": [
      ],
      "description": "The objective of this project-based module is to provide an opportunity for the students to work in a group to design and develop a game following the main stages of game development process. The module will focus on the design of core dynamic, game mechanics, strategy, progression, balancing, game levels, interface and technical features including 3D graphics, animation, AI, physics, and networking. In addition, software engineering principles will be practised in developing the game software.",
      "prereqTreeString": "CS3247"
    },
    {
      "code": "CS3218",
      "name": "Multimodal Processing in Mobile Platforms",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "Modern mobile platforms such as smart phones and tablets are equipped with an increasing number of sensing modalities. In addition to traditional components such as keyboards and touch screens, they are also equipped with cameras, microphones, inertial sensor, and GPS receivers. With these modalities all packed into a single platform, it is important to empower application developers with basic knowledge and practical skills in dealing with these modalities. This module introduces the students to basic theories, concept and practical skills needed in input, processing and output of multimodal data on mobile platforms.",
      "prereqTreeString": "(AND (OR CS2030 CS2040S) MA1101R MA1521)"
    },
    {
      "code": "CS3240",
      "name": "Interaction Design",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "This course is intended for students in computing and related disciplines whose work focuses on human-computer interaction issues in the design of computer systems. The course stresses the importance of user-centred design and usability in the development of computer applications and systems. Students will be taken through the analysis, design, development, and evaluation of human-computer interaction methods for computer systems. They will acquire hands-on design skills through laboratory exercises and assignments. The course also covers HCI design principles and emphasizes the importance of contextual, organisational, and social factors in system design.",
      "prereqTreeString": "CS2030"
    },
    {
      "code": "CS3249",
      "name": "User Interface Development",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "This module aims at providing students with technical skills and hands-on experience of user interface development. It focuses on the design and implementation of user interfaces in general, including graphical user interface. It covers essential topics including user interface models, psychology of humans and computers, user interface style, layout guidelines, GUI programming with widget toolkits, interaction models, event handling, multithreading, interacting with multimedia hardware, usability testing. Selected advanced topics such as geometric transformation, and 3D user interfaces, multiple-user interaction and real-time interaction are also covered.",
      "prereqTreeString": "CS2103T"
    },
    {
      "code": "CS4240",
      "name": "Interaction Design for Virtual and Augmented Reality",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "This module aims to expose students to the human-centered principles of designing and building virtual reality (VR) and augmented reality (AR) applications. Students will learn about the fundamentals of VR and AR, human perceptions of reality, and the design patterns and guidelines for user interactions within VR/AR applications. Students will gain hands on experience building VR/AR applications applying these interaction principles.",
      "prereqTreeString": ""
    },
    {
      "code": "CS4249",
      "name": "Phenomena and Theories of Human-Computer Interaction",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "This module teaches the underlying science of Human-Computer Interaction (HCI) and its application to user interface design. It surveys a wide range of  psychological theories beginning with organizational behaviour approaches, understanding of work and workflow within organizations, and moving on to understanding human psychological architecture and processing constraints. It demonstrates via a combination of scientific theory understanding and engineering modelling the solutions of design problems facing a user interface designer. It also covers new design methods and techniques available and the new conceptual mechanisms used in HCI such as the metaphors for describing user interaction.",
      "prereqTreeString": "CS3240"
    },
    {
      "code": "CS4344",
      "name": "Networked and Mobile Gaming",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG",
        "NDS"
      ],
      "description": "This module aims at providing students a deep understanding of various technical issues pertaining to the development of networked games and mobile games. Students will be exposed to concepts from distributed systems, operating systems, security and cryptography, networking and embedded systems.  In particular, issues such as game server architectures (mirrored, centralized, peer-to-peer etc.), consistency management (bucket synchronization, dead reckoning etc.), interest management, scalability to large number of clients (C10K problem), cheat prevention and detection, power management, will be discussed.",
      "prereqTreeString": "(AND CS2106 CS3103)"
    },
    {
      "code": "CS4345",
      "name": "General-Purpose Computation on GPU",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG",
        "Para"
      ],
      "description": "With the advancements in the technology of graphics processing units (GPUs), many computations can be performed faster on the GPUs than the CPUs. They are also programmable, making them useful for not just computer graphics processing but also general-purpose computations. Therefore, they are a natural choice as high-speed coprocessors to the CPUs in various applications. This module introduces the architecture of GPU, program writing on GPU using high-level language such as Cg, and the use of GPU in applications including computer graphics, games, scientific computation, and image processing.",
      "prereqTreeString": "CS3241"
    },
    {
      "code": "CS4351",
      "name": "Real-Time Graphics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "Real-time graphics is driving many interactive computer applications, such as 3D games, VR, 3D modelling, and data visualization. Recent rendering techniques have been heavily exploiting the powerful graphics hardware to\nachieve unprecedented performance and effects. In this module, students study the modern real-time rendering pipeline and GPU architecture, learn about modern and traditional real-time rendering techniques, and write\nshaders to implement these techniques for the GPU. The syllabus includes multiple-pass rendering; shading and reflection models; procedural texture-mapping and shading; lights and shadows; noise and natural materials;\nnon-photorealistic rendering; volume rendering; deferred shading; scene management; post-rendering processing; performance analysis and optimization.",
      "prereqTreeString": "CS3241"
    },
    {
      "code": "CS5240",
      "name": "Theoretical Foundations in MultiMedia",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "The module lays the theoretical foundation for graduate students to do research in multimedia: images, videos, audio, speech, graphics and text documents. The module covers the main theoretical issues common to various multimedia research.  These issues provide a general framework within which specific techniques in particular research areas can be understood. Topics include: vector and signal representations of multimedia, spatial and frequency analyses, models and parameter estimation methods. Examples will be drawn from different types of media.  Upon completion, students will be well-grounded to pursue further research in computer vision, graphics, natural language processing, audio analysis and multimedia applications.",
      "prereqTreeString": "(AND CS2040S MA1101R MA1521 ST2334)"
    },
    {
      "code": "CS5343",
      "name": "Advanced Computer Animation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "From the covert digital water in Titanic to the mixed real and virtual actors in Avatar, from the arm-controllable Wii games to the completely full-body-play Xbox Kinect games, computer animation technologies have advanced significantly during the past decades, both in the movie and the game industries. This module reveals all the exciting behind-the-scene techniques that make these movies and games possible, including but not limited to motion capture, fluid animation, facial animation, and fullbody character animation. This is a project-based course that aims to provide strong foundation on advanced computer animation methods and prepare students for research in animation.",
      "prereqTreeString": "(AND (AND CS2030 CS2040S) MA1101R MA1521 CS3241)"
    },
    {
      "code": "CS5346",
      "name": "Information Visualisation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "CGG"
      ],
      "description": "This module aims to bring together individual pedagogies\nof design, information, and computation, for teaching the\nanalysis and representation of data for visualisation.\nStudents will learn the methodology of developing and\nevaluating an information visualisation solution, common\ninformation visualisation techniques (such as those for\ntopical, spatial, hierarchical, temporal, and relational data),\nand methods for scaling up interactive visualisation with big\ndata. After the module, students should be able to use the\nexisting visualisation tools for building useful, interactive,\ninformation visualisation to facilitate complex data\nanalytics, exploration, understanding, and pattern\ndiscovery.",
      "prereqTreeString": "(AND CS2040S CS2102 CS3240 ST2334)"
    },
    {
      "code": "CS2107",
      "name": "Introduction to Information Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "ComSec"
      ],
      "focusElectives": [
      ],
      "description": "This module serves as an introductory module on information security. It illustrates the fundamentals of how systems fail due to malicious activities and how they can be protected. The module also places emphasis on the practices of secure programming and implementation. Topics covered include classical/historical ciphers, introduction to modern ciphers and cryptosystems, ethical, legal and organisational aspects, classic examples of direct attacks on computer systems such as input validation vulnerability, examples of other forms of attack such as social engineering/phishing attacks, and the practice of secure programming.",
      "prereqTreeString": "CS1101S"
    },
    {
      "code": "CS3235",
      "name": "Computer Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "ComSec"
      ],
      "focusElectives": [
      ],
      "description": "The objective of this module is to provide a broad understanding of computer security with some indepth discussions on selected topics in system and network security. This module covers the following topics: intrusion detection, DNS security, electronic mail security, authentication, access control, buffer overflow, memory and stack protection, selected topics in application security, for instance, web security, and well-known attacks.",
      "prereqTreeString": "(AND CS2105 CS2106 CS2107)"
    },
    {
      "code": "CS4236",
      "name": "Cryptography Theory and Practice",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "ComSec"
      ],
      "focusElectives": [
      ],
      "description": "This module aims to introduce the foundation, principles and concepts behind cryptology and the design of secure communication systems. The emphasis is on the formulation and techniques of various cryptographic primitives, and on the secure usage of such primitives to achieve the goals of confidentially, integrity, and authenticity in both theoretical settings and practical scenarios. Basic topics include pseudorandom functions, symmetric key encryption, public key encryption, message\nauthentication codes, hash functions, digital signatures, key exchange and PKI. Selected topics may include: secret sharing, TCP/IP security, Kerberos, SSL, trusted computing, side-channel attacks.",
      "prereqTreeString": "(AND CS2040S CS1231S CS2107)"
    },
    {
      "code": "CS4238",
      "name": "Computer Security Practice",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "ComSec"
      ],
      "focusElectives": [
      ],
      "description": "This is a practice security module with emphasis on hands-on experiences of computer security. The objective of this module is to connect computer security knowledge to practical skills, including common attacks and protection mechanisms, system administration, and development of secured software. Topics covered include network security, operating system security, and application security, such as DNS attacks, memory-error exploits, and web application attacks. Students will learn through lab-based exercises and assignments.",
      "prereqTreeString": "CS3235"
    },
    {
      "code": "CS4239",
      "name": "Software Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "ComSec",
        "SE"
      ],
      "focusElectives": [
      ],
      "description": "Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.",
      "prereqTreeString": "(AND CS3235 CS2103T)"
    },
    {
      "code": "CS3221",
      "name": "Operating Systems Design and Pragmatics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "This module builds upon the conceptual foundation formed in CS2106 and extends it to the study of real-life operating systems. The focus is to understand how actual operating systems work including the pragmatics, system architecture and design and implementation. Details will be drawn from contemporary operating systems such as Unix/Linux and Windows. Topics include kernel architecture and interfaces, computer architecture issues, process APIs and implementation, threads, scheduling, physical and kernel memory management, virtual memory, synchronisation and interprocess communication mechanisms, multi-processor issues, device characteristics and management, file system implementation, memory mapped files, special purpose file systems.",
      "prereqTreeString": "CS2106"
    },
    {
      "code": "CS4276",
      "name": "IoT Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "With the advent of the Internet-of-Things, the computing paradigm is quickly changing from the traditional cyber domain to cyber-physical domain. This is made possible from devices that are equipped with sensors and actuators that interact with the physical world. In this module, we will investigate how such sensing systems affect the notion of computer security. We will also explore the state-of-the-art research in the areas of sensing systems and how they can provide benefits to the security of the Internet-of-Things. This module will also investigate how an attacker may compromise the sensing information to exploit security vulnerabilities in these systems.",
      "prereqTreeString": ""
    },
    {
      "code": "CS5231",
      "name": "Systems Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "This module introduces fundamental notions and requirements in computer system security and the mechanisms that provide security in various systems and applications. It aims to teach students the security perspective of popular computer systems, such as desktop systems, mobile systems, and web-based systems. Its topics include software security, operating system security, mobile security, web security, trusted platforms, and auditing and forensic analysis.",
      "prereqTreeString": "CS3235"
    },
    {
      "code": "CS5250",
      "name": "Advanced Operating Systems",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec",
        "Para"
      ],
      "description": "The module covers a broad range of issues in the design and implementation of modern advanced operating systems. The topics covered in this module includes OS design strategies (including microkernels, mobile, embedded and real-time operating systems and the component’s interfaces), priority and resource allocation strategies; scheduling algorithms (including for multi-core, multi-processors); naming, protection and security; UI and windowing systems; file system implementations (including network and distributed file systems); failure and recovery; and virtualization and the Internet-ready OS. They extend and provide in-depth coverage of material in earlier prerequisite OS modules.",
      "prereqTreeString": "CS2106"
    },
    {
      "code": "CS5321",
      "name": "Network Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec",
        "NDS"
      ],
      "description": "The objective of this module is to introduce students to the various issues that arise in securing the networks, and study the state-of-the-art techniques for addressing these challenges. A number of most damaging attacks on computer systems involve the exploitation of network infrastructure. This module provides an in-depth study of network attack techniques and methods to defend against them. Topics include basic concepts in network security; firewalls and virtual private networks; network intrusion detection; denial of service (DoS); traffic analysis; secure routing protocols; protocol scrubbing; and advanced topics such as wireless network security.",
      "prereqTreeString": "CS3235"
    },
    {
      "code": "CS5322",
      "name": "Database Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec",
        "DB"
      ],
      "description": "Database security has a great impact on the design of today's information systems. This course will provide an overview of database security concepts and techniques and discuss new directions of database security in the context of Internet information management. Topics covered include: Access control models for DBMSs, Inference controls, XML database security, Encrypted databases, Digital credentials and PKIs, Trust in open systems, and Peer-to-peer system security.",
      "prereqTreeString": "CS3223"
    },
    {
      "code": "CS5331",
      "name": "Web Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "This module aims to prepare graduate students for understanding the security of the latest web platform and its interplay with operating systems and the cloud infrastructure. The topics covered include the design of web browsers and web \napplications, vulnerabilities in web applications and web browsers, design of web scanners, authentication in web-based platforms, security policies and enforcement mechanisms. This module also covers security topics on the interface between the \nweb platform and the backend systems, such as the underlying database systems and cloud infrastructure.",
      "prereqTreeString": "CS3235"
    },
    {
      "code": "CS5332",
      "name": "Biometric Authentication",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "Biometrics (such as fingerprint, iris images) are commonly used for authentication. This module covers authentication methods, different types of biometrics, pattern recognition, performance measurement, spoofing attacks, as well as issues such as privacy, user acceptance, and standards compliance. Students will gain a solid understanding of the fundamentals of the technology underlying biometric authentication, and the key issues to be addressed for successful deployment. Both the theoretical and practical\naspects of biometrics authentication will be discussed.",
      "prereqTreeString": "(AND CS2040S MA1101R MA1521 ST2334)"
    },
    {
      "code": "IFS4101",
      "name": "Legal Aspects of Information Security",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "This module examines the laws relating to information security. The issues and considerations concerning information security have greatly shaped many laws, in particular, the laws relating to cybercrimes, electronic commerce, electronic evidence, document discovery, information management and data protection. These areas of the law have in turn altered the development and practice of information security in the industry. The objective of this module is to provide information security professionals with a working knowledge of these legal issues in information security, so that they are better placed to represent and protect the legal interests of their employers and their institutions.",
      "prereqTreeString": "CS2107"
    },
    {
      "code": "IFS4102",
      "name": "Digital Forensics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "Digital forensics encompasses the recovery and investigation of material found in digital devices in relation to cyber crime and other crimes where digital evidence is relevant. This module gives an introduction to principles, techniques, and tools to perform digital forensics. Students will gain a good understanding of the fundamentals of digital forensics; key techniques for performing evidence extraction and analysis on UNIX/Linux systems, Windows\nsystems, networks, Web applications, and mobile devices; and gain exposure to available tools. Some legal aspects of digital forensics will also be discussed.",
      "prereqTreeString": "CS3235"
    },
    {
      "code": "IFS4103",
      "name": "Penetration Testing Practice",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "This is a practice-oriented and project-based module that provides a hands-on experience of performing penetration testing on a collaborating organisation’s system. It aims to provide students with a realistic platform for applying offensive-based vulnerability assessment and analysis techniques on designated target systems. Students will be part of a penetration testing team, and be guided to apply the methodology, techniques, and tools of assessing the security of the target systems. This module contains a mix of technical-review seminars, testing-scoping meetings, and penetration testing exercises, analysis, as well as reporting.",
      "prereqTreeString": "CS3235"
    },
    {
      "code": "IS4231",
      "name": "Information Security Management",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "ComSec"
      ],
      "description": "The main focus of this module is on the managerial aspects of information security. This module prepares the students for their future roles as IS managers or IS security professionals. Through this module, students will appreciate the challenges of managing information security in the modern business organization. Topics include risk management, security policies and programmes, managing the security function, and planning for continuity.",
      "prereqTreeString": "CS2107"
    },
    {
      "code": "CS2102",
      "name": "Database Systems",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "DB"
      ],
      "focusElectives": [
      ],
      "description": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.",
      "prereqTreeString": "(AND (OR CS2030 CS2040S) CS1231S)"
    },
    {
      "code": "CS3223",
      "name": "Database Systems Implementation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "DB"
      ],
      "focusElectives": [
      ],
      "description": "This module provides an in-depth study of the concepts and implementation issues related to database management systems. It first covers the physical implementation of relational data model, which includes storage management, access methods, query processing, and optimisation. Then it covers issues and techniques dealing with multi-user application environments, namely, transactions, concurrency control and recovery. The third part covers object-database systems that are useful extension of relational databases to deal with complex data types. The last part covers database technologies required for modern decision support systems, including data warehousing, data mining and knowledge discovery and on-line analytical processing.",
      "prereqTreeString": "(AND CS2040S CS2102)"
    },
    {
      "code": "CS4221",
      "name": "Database Applications Design and Tuning",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "DB"
      ],
      "focusElectives": [
      ],
      "description": "This module addresses the design and performance tuning of\ndatabase applications. The syllabus focusses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entityrelationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of non-relational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).",
      "prereqTreeString": "CS3223"
    },
    {
      "code": "CS4224",
      "name": "Distributed Databases",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "DB"
      ],
      "focusElectives": [
      ],
      "description": "This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).",
      "prereqTreeString": "CS3223"
    },
    {
      "code": "CS4225",
      "name": "Big Data Systems for Data Science",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "DB"
      ],
      "focusElectives": [
      ],
      "description": "Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science utilizes advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.",
      "prereqTreeString": "CS2102"
    },
    {
      "code": "CS5226",
      "name": "Database Tuning",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "DB"
      ],
      "description": "This module is concerned with the performance related database administration issues. The topics include: an overview of query optimisation techniques, physical data base design, system configuration, buffer management, performance analysis and tuning techniques.",
      "prereqTreeString": "CS3223"
    },
    {
      "code": "CS2108",
      "name": "Introduction to Media Computing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "MIR"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.",
      "prereqTreeString": "CS2040S"
    },
    {
      "code": "CS3245",
      "name": "Information Retrieval",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "MIR"
      ],
      "focusElectives": [
      ],
      "description": "This module discusses the basic concepts and methods of information retrieval including capturing, representing, storing, organizing, and retrieving unstructured or loosely structured information. The most well-known aspect of information retrieval is document retrieval: the process of indexing and retrieving text documents. However, the field of information retrieval includes almost any type of\nunstructured or semi-structured data, including newswire stories, transcribed speech, email, blogs, images, or video. Therefore, information retrieval is a critical aspect of Web search engines. This module also serves as the foundation for subsequent modules on the understanding, processing and retrieval of particular web media.",
      "prereqTreeString": "(AND CS2030 CS2040S)"
    },
    {
      "code": "CS4242",
      "name": "Social Media Computing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "MIR"
      ],
      "focusElectives": [
      ],
      "description": "The emergence of WWW, smart mobile devices and social networks has revolutionised the way we communicate, create, disseminate, and consume information. This has ushered in a new era of communications that involves complex information exchanges and user relationships. This module aims to provide students with a good understanding of the social network phenomena and computational skills for analysing the complex social relation networks between users, the contents they shared, and the ways contents and events are perceived and propagated through the social networks. The analysis will provide better understanding of the concerns and interests of users, and uncover live and emerging events that will affect the community.",
      "prereqTreeString": "(AND CS2108 CS3245)"
    },
    {
      "code": "CS4347",
      "name": "Sound and Music Computing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "MIR"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the fundamental technologies employed in sound and music computing which are grouped into three major areas: Sound, Music, and Interaction. It begins with an introduction to sound production, propagation and perception, followed by digital sound recording, editing, post-processing and compression. Its core components consists of the analytic and synthetic approaches of sound and music. The analytic approach pertains to analysis and understanding, whereas the synthetic approach pertains to generation and processing. Interaction aspects include multimodal mobile music interface and sound interaction design. Finally, music information retrieval will be introduced as an application of analytic techniques.",
      "prereqTreeString": "(AND CS2108 MA1101R MA1521)"
    },
    {
      "code": "CS5246",
      "name": "Text Mining",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "MIR"
      ],
      "description": "Text mining concerns the processing of unstructured natural language text to mine information and knowledge. It is distinguished from data mining in its focus on unstructured text rather than structured data present in traditional databases. Topics include text classification, text clustering, sentiment analysis, text summarization, information extraction (named entity recognition, relation and event extraction), and question answering. The module will emphasize the use of machine learning approaches to text mining.",
      "prereqTreeString": "(AND CS2103T MA1101R ST2334)"
    },
    {
      "code": "CS5241",
      "name": "Speech Processing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "MIR"
      ],
      "description": "This module exposes the graduate students to the fundamental theory of speech processing, focusing primarily on automatic speech recognition. Upon completion of this module, students should be able to perform research on speech recognition topics and commercial speech technology development. Topics covered by this module include: speech signal processing, automatic speech recognition (ASR), continuous speech recognition, acoustic modelling using the Hidden Markov Model (HMM), language modelling for ASR and advanced speech recognition techniques for state-of-the-art large vocabulary continuous speech recognition (adaptation and robustness, discriminative training and decoding strategies).",
      "prereqTreeString": "(AND CS1231S MA1521 MA1101R)"
    },
    {
      "code": "CS6242",
      "name": "Digital Libraries",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "MIR"
      ],
      "description": "This module is targeted to graduate students of computer science and information systems wishing to understand the issues in building, using and maintaining large\nvolumes of knowledge in digital libraries. Fundamentals of modern information retrieval is assumed. The course will focus on how such information retrieval technology operationalises traditional information finding skills of the librarian/cataloger/archivist, organised around 5S framework for digital\nlibrary education. Areas within digital libraries that will be covered include collection development, knowledge organisation, DL architecture, user behavior, services, preservation, management and evaluation and DL education and research. Students will round out their knowledge with case studies of how different disciplines (e.g. music, arts, medicine and law) impose different search, usability and maintenance requirements on the digital library.",
      "prereqTreeString": "CS3245"
    },
    {
      "code": "CS3103",
      "name": "Computer Networks Practice",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "NDS"
      ],
      "focusElectives": [
      ],
      "description": "This module aims to provide an opportunity for the students to learn commonly-used network protocols in greater technical depth with their implementation details than a basic networking course. Students will perform hands-on experiments in configuring and interconnecting LANs using networking devices/technologies (e.g., routers, switches, SDN switches, and hubs), networking protocols (e.g., DHCP, DNS, RIP, OSPF, ICMP, TCP, UDP, wireless LAN, VLAN protocols, SIP, SSL, IPSec-VPN) and networking tools (e.g, tcpdump, netstat, ping, traceroute). Students will learn higher-layer network protocols and develop network applications (client/server, P2P) via socket programming.",
      "prereqTreeString": "CS2105"
    },
    {
      "code": "CS4222",
      "name": "Wireless Networking",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "NDS"
      ],
      "focusElectives": [
      ],
      "description": "This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.",
      "prereqTreeString": "(AND CS2105 ST2334)"
    },
    {
      "code": "CS4226",
      "name": "Internet Architecture",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "NDS"
      ],
      "focusElectives": [
      ],
      "description": "This module aims to focus on advanced networking concepts pertaining to the modern Internet architecture and applications. It covers a range of topics including network performance (throughput, delay, Little’s Law and M/M/1 queuing formula), and resource allocation and buffer management (max-min fair, round-robin and RED), intra- and inter-domain routing (RIP, OSPF and BGP), congestion control and modern variations of TCP (AIMD and Cubic TCP), peer-to-peer applications and content delivery networks (BitTorrent, Skype, Akamai), and data center networking and management (SDN and OpenFlow).",
      "prereqTreeString": "(AND CS2105 ST2334)"
    },
    {
      "code": "CS5223",
      "name": "Distributed Systems",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "NDS",
        "Para"
      ],
      "description": "The topic of Distributed Systems is now garnering increasing importance, especially with the advancement in technology of the Internet and WWW. The aim of this module is to provide students with basic concepts and principles of distributed operating systems, interprocess communications, distributed file systems, shared data, and the middleware approach. The module is taught in seminar style, and several case studies are included, e.g. CORBA.   Topics: Introduction - Characteristics of Distributed Systems; Process Management Communication in Distributed Systems; Distributed Synchronisation; Distributed Real-time Systems; File Systems; Naming Security; Fault Tolerant Distributed Systems; Distributed Simulation; WWW as an application of Distributed System.",
      "prereqTreeString": "CS3211"
    },
    {
      "code": "CS5224",
      "name": "Cloud Computing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "NDS",
        "Para"
      ],
      "description": "This module aims to provide an overview of the design, management and application of cloud computing. The topics include managing virtualization, cloud computing environments, cloud design patterns and use cases, data centre architectures and technologies, cloud services fulfillment and assurance, orchestration and automation of cloud resources, cloud capacity management, cloud economics, case studies.",
      "prereqTreeString": ""
    },
    {
      "code": "CS5229",
      "name": "Advanced Computer Networks",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "NDS"
      ],
      "description": "This course covers advanced fundamental principles of computer networks and techniques for networking. The goal of this course is to teach these fundamentals/techniques that will remain important and relevant regardless of the hot topics in networks and networking. Briefly, the topics include advanced network architecture and design principles, protocol mechanisms, implementation principles and software engineering practices, network algorithmic, network simulation techniques and tools, performance analysis and measurement, and protocol specification/verification techniques.",
      "prereqTreeString": "CS4226"
    },
    {
      "code": "CS5248",
      "name": "Systems Support for Continuous Media",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "NDS"
      ],
      "description": "This module is targeted at computer science graduate students and covers the major aspects of building streaming media applications -- from coding to transmission to playback. Issues such as transport protocols, control protocols, caching, buffering, synchronisation and adaptations will be examined.",
      "prereqTreeString": "(AND CS2106 CS4226)"
    },
    {
      "code": "CS3210",
      "name": "Parallel Computing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Para"
      ],
      "focusElectives": [
      ],
      "description": "The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts: parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes: theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance\nand scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.",
      "prereqTreeString": "CS2100"
    },
    {
      "code": "CS3211",
      "name": "Parallel and Concurrent Programming",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Para",
        "PL"
      ],
      "focusElectives": [
      ],
      "description": "A concurrent system consists of a set of processes that executes simultaneously and that may collaborate by communicating and synchronising with one another. Examples of concurrent systems are parallel programs that describe sets of collaborating processes. This module introduces the design, development and debugging of parallel programs. It will build on the concurrency concepts gained from the Operating Systems module. It covers concepts and modelling tools for specifying and reasoning (about the properties of) concurrent systems and parallel programs. It also covers principles of performance analysis, asynchronous and asynchronous parallel programming, and engineering concurrent systems and parallel programs.",
      "prereqTreeString": "CS2106"
    },
    {
      "code": "CS4223",
      "name": "Multi-core Architectures",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "Para"
      ],
      "focusElectives": [
      ],
      "description": "The world of parallel computer architecture has gone through a significant transformation in the recent years from high-end supercomputers used only for scientific applications to the multi-cores (multiple processing cores on a single chip) that are ubiquitous in mainstream computing systems including desktops, servers, and embedded systems. In the context of this exciting development, the aim of this module is to examine the design issues that are critical to modern parallel architectures. Topics include instruction-level parallelism through static and dynamic scheduling, shared memory, message-passing, and data parallel computer architectures, cache coherence protocols, hardware synchronization primitives, and memory consistency models.",
      "prereqTreeString": "(AND CS2106 CS3210)"
    },
    {
      "code": "CS5207",
      "name": "Foundation in Operating Systems",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Para"
      ],
      "description": "This module is an introductory course to fundamental and advanced operating systems techniques aimed for computer science graduate students.  The topics covered include threads, scheduling, concurrency, memory management, and storage systems, software management, and security.  After taking the module, students are expected to understand common design principles used, understand the common issues and problems in computer systems, and be able to design and evaluate a system.",
      "prereqTreeString": ""
    },
    {
      "code": "CS5222",
      "name": "Advanced Computer Architecture",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Para"
      ],
      "description": "The aim of this module is to introduce the state-of-the-art architectural advances underlying the current generation of computing systems. A review of pipelined processor design and hierarchical memory design is followed by advanced topics including exploitation of instruction-level parallelism through dynamic instruction scheduling and speculation, exploiting thread-level parallelism through\nmultiprocessors, and optimizations for memory and storage subsystems. Throughout the module, particular emphasis will be placed on cost-performance-power-reliability trade-offs in designing the different architectural components.",
      "prereqTreeString": "CS4223"
    },
    {
      "code": "CS5239",
      "name": "Computer System Performance Analysis",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "Para"
      ],
      "description": "The objective of this module is to provide students a working knowledge of computer performance evaluation and capacity planning. They will be able to identify performance bottlenecks, to predict when performance limits of a system will be exceeded, and to characterise present and future workload to perform capacity planning activities. Topics include: performance analysis overview; measurement techniques and  tools including workload characterisation, instrumentation, benchmarking, analytical modelling techniques including operational analysis, stochastic queuing network analysis; performance of client-server architectures; capacity planning; case studies.",
      "prereqTreeString": "(AND CS2030 ST2334)"
    },
    {
      "code": "CS2104",
      "name": "Programming Language Concepts",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "PL"
      ],
      "focusElectives": [
      ],
      "description": "This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.",
      "prereqTreeString": "CS2030"
    },
    {
      "code": "CS4215",
      "name": "Programming Language Implementation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "PL"
      ],
      "focusElectives": [
      ],
      "description": "This module provides the students with theoretical knowledge and practical skill in the implementation of programming languages. It discusses implementation aspects of fundamental programming paradigms (imperative, functional and object-oriented), and of basic programming language concepts such as binding, scope, parameter-passing mechanisms and types. It introduces the language processing techniques of interpretation and compilation and virtual machines. The lectures are accompanied by lab sessions which will focus on language processing tools, and take the student through a sequence of programming language implementations. This modules\nalso covers automatic memory management, dynamic linking and just-in-time compilation, as features of modern execution systems.",
      "prereqTreeString": "(AND CS2040S CS2030)"
    },
    {
      "code": "CS4212",
      "name": "Compiler Design",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "PL"
      ],
      "focusElectives": [
      ],
      "description": "The objective of this module is to introduce the principal ideas behind program compilation, and discusses various techniques for program parsing, program analysis, program optimisation, and run-time organisation required for program execution. Topics covered include regular expressions, context-free grammars, lexical analysis, syntax analysis; different algorithms for parsing codes, such as top-down parsing, bottom-up parsing; translation to abstract syntax using modern parser generator technology, intermediate representation, semantics analysis, type system, un-optimised code generation, code optimisation, data-flow analysis, instruction scheduling.",
      "prereqTreeString": "CS2104"
    },
    {
      "code": "CS3234",
      "name": "Logic for Proofs and Programs",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "PL",
        "SE"
      ],
      "description": "This module introduces logic as a means for specifying and solving computational problems. It explores how logic can be used to represent computational problems, how these representations can be proven correct, and how they can be executed on a computer. Students learn about logic as formal systems (semantic, axiomatic, and deductive) and how to write proofs in the different systems. They also learn how to use a proof assistant such as Coq and how to program in a logic programming language such as Prolog.  Topics include classical and intuitionistic logic, SAT, Peano’s axioms, Hoare logic, and other selected logic systems.",
      "prereqTreeString": "CS1231S"
    },
    {
      "code": "CS5232",
      "name": "Formal Specification and Design Techniques",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "PL",
        "SE"
      ],
      "description": "The primary role of the formal specification is to provide a precise and unambiguous description of a computer system. A formal specification allows the system designer to verify important properties and detect design error before system development begins. The objective of this course is to study various formal specification and design techniques for modelling (1) object-oriented systems, (2) real-time distributed systems, and (3) concurrent reactive systems. The course will focus on the state-based notations Z/Object-Z, event-based notation CSP/Timed-CSP. Graphical modelling notations, such as StateChart and UML (Unified Modelling Language) will also be addressed.",
      "prereqTreeString": "(AND CS1231S CS2103T)"
    },
    {
      "code": "CS5214",
      "name": "Design of Optimising Compilers",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "PL"
      ],
      "description": "The performance gap between optimised and unoptimised code continues to widen as modern processors evolve. Notably, the emerging explicitly parallel instruction computing (EPIC) processors are significantly dependent on a range of aggressive program optimisations to yield performance. This module provides an in-depth study of code optimisation techniques used in compilers for state-of-the-art processors.  Topics covered include structure of an optimising compiler, the program dependence graph, front end optimisations, instruction scheduling, register allocation, compiling for EPIC processors including predicated execution and software pipelining with hardware support, loop optimisations, dataflow analysis and optimisation, optimisations for the memory hierarchy, and automatic parallelisation.",
      "prereqTreeString": "CS4212"
    },
    {
      "code": "CS5215",
      "name": "Constraint Processing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "PL",
        "AI"
      ],
      "description": "Constraint programming is an alternative approach to computing in which the programming process is limited to a generation of requirements (constraints) and to solving of them by general methods and domain dependent methods. This module discusses the basic aspects of constraint programming, focusing on how to model and solve the constraints. Students will learn problem modelling by means of constraints and the main techniques used to solve such systems of constraints. The module focuses on the fundamental notions of constraint satisfaction problems, local consistency, constraint propagation, complete and incomplete constraint solvers, and various search methods.",
      "prereqTreeString": "CS2104"
    },
    {
      "code": "CS5218",
      "name": "Principles and Practice of Program Analysis",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "PL"
      ],
      "description": "Program analysis denotes automated processes for predicting, estimating or proving properties of program behavior, whether functional or non-functional.  Example uses are compiler optimization, bug detection, performance evaluation, detection of security vulnerabilities, amongst many others.  This module first provides the rigorous mathematical foundations. This step is necessary in order to understand the common elements within the broad area of software analysis.  Secondly, through the use of a state-of-the-art program analysis system, this module provides hands-on instruction on programming real-life analyses.  In the end, the graduating student will be able to address a broad spectrum of program analysis in a practical way.",
      "prereqTreeString": "(OR CS4212 CS4215)"
    },
    {
      "code": "CS3219",
      "name": "Software Engineering Principles and Patterns",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "SE"
      ],
      "focusElectives": [
      ],
      "description": "This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.",
      "prereqTreeString": "CS2103T"
    },
    {
      "code": "CS4211",
      "name": "Formal Methods for Software Engineering",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "SE"
      ],
      "focusElectives": [
      ],
      "description": "Before software can be designed, its requirements must be well understood. This in turns requires a thorough understanding of the application domain. Based on the requirements, software engineers construct design models, and then use these design models as guide to construct software implementations. This module will cover formal specification and verification techniques for accurately capturing and reasoning about requirements, model and code. The topics covered include modeling notations, temporal logics, model checking, software model checking, theorem proving, and symbolic execution based analysis. Most importantly, the module will attempt to inculcate an appreciation and understanding of formal thinking in software design and construction.",
      "prereqTreeString": "CS2103T"
    },
    {
      "code": "CS4218",
      "name": "Software Testing",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
        "SE"
      ],
      "focusElectives": [
      ],
      "description": "This module covers the concepts and practice of software testing including unit testing, integration testing, and regression testing. Various testing coverage criteria will be discussed. Debugging methods for finding the root-cause of errors in failing test cases will also be investigated. The use of testing and analysis for performance prediction, performance clustering and performance debugging will be studied. Students will acquire crucial skills on testing and debugging through hands-on assignments.",
      "prereqTreeString": "CS3219"
    },
    {
      "code": "CS3216",
      "name": "Software Product Engineering for Digital Markets",
      "mc": 5,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "SE"
      ],
      "description": "In this module, students will practice software product engineering by working in small teams to develop well-tested, user-friendly, production-quality software for the real world. To support this goal, students work closely with users to understand their problems, gather their requirements, and obtain their feedback through a rapid, iterative, application design and development process. Students will also be exposed to practical issues for digital markets such as growing the user base of their application, deployment of the application on the Web or in the cloud system, and validating the UI design and UX of the application.",
      "prereqTreeString": "CS2103T"
    },
    {
      "code": "CS3217",
      "name": "Software Engineering on Modern Application Platforms",
      "mc": 5,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "SE"
      ],
      "description": "This module introduces students to the practice of software engineering on modern application platforms such as mobile devices, the Web and cloud systems. Students will work in small project teams to develop well-tested,\nproduction-quality software. This module focuses on building core software engineering skills and competencies in programming modern application platforms. It also trains students to work well in project teams. Students will be\nassessed on both their individual programming competencies and their software enginnering skills in final team project.",
      "prereqTreeString": "CS2103T"
    },
    {
      "code": "CS3226",
      "name": "Web Programming and Applications",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "SE"
      ],
      "description": "This module introduces students to software development on the Web platforms. Students will be exposed to important computer science concepts, including networking, databases, computer security, user interface design, programming languages, and software engineering. These concepts will be tied together through hands-on practice in building a Web-based application using the current Web development technology. At the end of the module, students are expected to be able to design and develop a Web application, to appreciate the underlying technology needed to build a Web application, and to develop a fundamental understanding of related computer science concepts.",
      "prereqTreeString": "CS2030"
    },
    {
      "code": "CS5219",
      "name": "Automated Software Validation",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "SE"
      ],
      "description": "The immense growth in the complexity of software has increased the scope of errors, which are often critical. The nature of these errors is diverse, resulting from the diversity of the various classes of software: sequential, multithreaded, reactive and real-time. In this course, we will study techniques for verification, run-time monitoring and debugging of software which help us to give certain guarantees against such errors. The focus will be on automated validation techniques.",
      "prereqTreeString": "CS2104"
    },
    {
      "code": "CS5272",
      "name": "Embedded Software Design",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
        "SE"
      ],
      "description": "This course focuses on the design and implementation of software for programmable embedded systems. Embedded computing systems hidden inside everyday electronic devices such as hand-phones, digital cameras etc. are becoming more and more prevalent. However, the heterogeneous nature of the underlying hardware as well as tight constraints on size, cost, power, and timing pose significant challenges to embedded software development. This course presents techniques that address these distinctive characteristics of embedded software implementation. Topics include embedded software development for programmable processors and reconfigurable hardware, component-based design, optimizations for performance, power, code size, operating system issues, and case studies of available systems.",
      "prereqTreeString": "(AND CS2106 CS2103T)"
    },
    {
      "code": "CS2220",
      "name": "Introduction to Computational Biology",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This course aims to develop flexible and logical problem solving skills, understanding of main bioinformatics problems, and appreciation of main techniques and approaches to bioinformatics. Through case studies and hands-on exercises, the student will (i) master the basic tools and approaches for analysis of DNA sequences, protein sequences, gene expression profiles, etc. (ii) understand important problems and applications of computational biology, including identifying functional features in DNA and protein sequences, predicting protein function, and deriving diagnostic models from gene expression profiles, (iii) be confident to propose new solutions to both existing and emerging problems in computational biology.",
      "prereqTreeString": "CS2040S"
    },
    {
      "code": "CS4330",
      "name": "Combinatorial Methods in Bioinformatics",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "After the complete sequencing of a number of genomes, we are in the stage to understand the mystery of our body, that is, we need to understand the information encoded in the genome and its relationship with RNA and protein.\nThis aim of this module is to cover algorithms related to this stage. In the module, we will cover the algorithms related to genome annotation, motif identification, proteomics, population genetics, microarray, etc.",
      "prereqTreeString": "CS2220"
    },
    {
      "code": "CS5233",
      "name": "Simulation and Modelling Techniques",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module aims to provide students with a working knowledge of applying\nsimulation techniques to model, simulate and study complex systems. It covers techniques in simulation model design, model execution, and model analysis. Students will have hands-on experience using a simulation package. The module will also introduce concepts of parallel and distributed simulation, and high level architecture.",
      "prereqTreeString": "(AND CS4231 ST2334)"
    },
    {
      "code": "CS3203",
      "name": "Software Engineering Project",
      "mc": 8,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module provides students with hands-on experience in\nworking in project groups through a complete SDLC to\ndevelop a well-designed, well-tested, large-scaled software\nsystem. The students will apply the current best software\nengineering practices on the analysis, design,\nimplementation, and testing of software system. Through\nthe project, students will practise analysis of user’s needs,\nformulation of computing requirements to meet the user’s\nneeds, modelling and design of the computer systems\naccording to the requirements, evaluation of the design,\nefficient implementation of software components, system\nintegration, software version control, and rigorous testing.",
      "prereqTreeString": "(OR CS2103T CS2103T)"
    },
    {
      "code": "CS3281",
      "name": "Thematic Systems Project I",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module is the first part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\nfirst part focuses on the analysis of the real-world problems, formulation of the computing requirements of the desired solution that meets the user’s needs, design of the computer systems according to the requirements, and evaluation of the design.",
      "prereqTreeString": "CS2103T"
    },
    {
      "code": "CS3282",
      "name": "Thematic Systems Project II",
      "mc": 4,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module is the second part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\nsecond part focuses on the development of algorithms required for the systems, implementation and testing of the algorithms and the systems, and evaluation of the systems according to the users’ requirements.",
      "prereqTreeString": "CS3281"
    },
    {
      "code": "CP3880",
      "name": "Advanced Technology Attachment Programme",
      "mc": 12,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "",
      "prereqTreeString": "(AND CS2101 (OR CS2103T CS2103T))"
    },
    {
      "code": "IS4010",
      "name": "Industry Internship Programme",
      "mc": 12,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This module enables students to apply the computing knowledge and skills that they have acquired in class to industry internships in companies/organizations. Students in industry internships will be jointly guided by supervisors from both the companies/organizations and the school Their progress on internship projects will be monitored during internship period, and their performance will be assessed through letter grades at the end of the internship. The internship duration will be 6 months, consisting of both a full-time and part-time component. Full-time internship attachment will last for 3 months during the NUS vacation period, and will continue on a part-time basis that will last for 3 months during the NUS study semester.",
      "prereqTreeString": "(AND CS2101 CS2107)"
    },
    {
      "code": "CP3200",
      "name": "Internship",
      "mc": 6,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "The IT industry and related businesses are developing rapidly for which students need to have an opportunity to expose themselves to the latest industry developments. This internship module requires students to work in a\ncompany for a period of three months. Their progress on projects will be monitored during attachment, and their performance will be graded as “Completed\nSatisfactory/Completed Unsatisfactory (CS/CU)” at the end of the attachment, based on the final project report. During the attachment, students are not expected to take other modules offered by the university.",
      "prereqTreeString": ""
    },
    {
      "code": "CP3202",
      "name": "Internship II",
      "mc": 6,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "The IT industry and related businesses are developing\nrapidly for which students need to have an opportunity to\nexpose themselves to the latest industry developments.\nThis internship module requires students to work in a company for a period of three months. Their progress on projects will be monitored during attachment, and their performance will be graded as “Completed Satisfactory/Completed Unsatisfactory (CS/CU)” at the end of the attachment, based on the final project report.\n\nThis is the second three month internship for the School of Computing students. With two internships, the student will be able to experience work in two distinct types of organizations, such as a start-up and a MNC, or in two different industries.",
      "prereqTreeString": "CP3200"
    },
    {
      "code": "CP3107",
      "name": "Computing for Voluntary Welfare Organisations",
      "mc": 6,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "This is a project-based module that provides students with\ntraining in software engineering by working on an actual\nsoftware system that supports a local voluntary welfare\norganisation. This module is graded on a Completed\nSatisfactorily/Completed Unsatisfactorily (CS/CU) basis.",
      "prereqTreeString": "(AND CS2030 CS2040S)"
    },
    {
      "code": "CP4101",
      "name": "B.Comp. Dissertation",
      "mc": 12,
      "su": false,
      "isCore": false,
      "focusPrimaries": [
      ],
      "focusElectives": [
      ],
      "description": "",
      "prereqTreeString": ""
    }
  ]
}
